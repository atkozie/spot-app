<?php

/*
config.php

provides a place to put all configuration info for our app.
*/

include 'credentials.php'; //stores database login info
//include 'common.php'; //stores our functions (ripped apart in this version)
include 'MyAutoLoader.php'; //loads class that autoloads all classes in include folder

define('DEBUG',TRUE); #we want to see all errors

date_default_timezone_set('America/Los_Angeles'); #sets default date/timezone for this website


//Here we create a constant to identify the name of the page.
define('THIS_PAGE',basename($_SERVER['PHP_SELF']));

$nav1['index.php'] = "Home";
$nav1['vinyl_list.php'] = "Vinyl";
$nav1['compound.php'] = "Compound";
$nav1['contact.php'] = "Contact";


/* use the following path settings for placing all code in one application folder */ 
define('VIRTUAL_PATH', 'http://www.adamkozie.com/itc240/spot/'); # Virtual (web) 'root' of application for images, JS & CSS files

define('PHYSICAL_PATH', '/home/adakoz1/adamkozie.com/itc240/spot/'); # Physical (PHP) 'root' of application for file & upload reference

define('INCLUDE_PATH', PHYSICAL_PATH . 'includes/'); # Path to PHP include files - INSIDE APPLICATION ROOT

/* these bits caused headers already sent errors...
header("Cache-Control: no-cache");
header("Expires: -1");#Helps stop browser & proxy caching
*/

ob_start();//prevents header errors


//here's where we switch the title for different pages:
switch (THIS_PAGE)
{
        case "index.php";
        $title = "Home Page Title";
        $pageID = "Home Page";
        break;
        
         case "vinyl_list.php";
        $title = "Vinyl List Page Title";
        $pageID = "Vinyl List Page";
        break;
        
        case "compound.php";
        $title = "Compound Page Title";
        $pageID = "Compound Page";
        break;
        
        case "contact.php";
        $title = "Contact Page Title";
        $pageID = "Contact Page";
        break;
        
        default:
        $title = THIS_PAGE;
        $pageID = "";       
}

//functions ripped out of common.php are below


/**
 * generic error handling function for hiding db errors, etc.
 *
 * Change the socks reference and any HTML to suit
 *
 * @param string $myFile File from which error emitted
 * @param string $myLine Line where error can be found
 * @param string $errorMsg Message to be shown to admin only
 * @return void
 * @see dbIn()
 * @todo none
 */

function myerror($myFile, $myLine, $errorMsg)
{
    if(defined('DEBUG') && DEBUG)
    {
       echo "Error in file: <b>" . $myFile . "</b> on line: <b>" . $myLine . "</b><br />";
       echo "Error Message: <b>" . $errorMsg . "</b><br />";
       die();
    }else{
        echo "I'm sorry, we have encountered an error.  Would you like to buy some socks?";
        die();
    }
}

/**
 * Wrapper function for processing data pulled from db
 *
 * Forward slashes are added to MySQL data upon entry to prevent SQL errors.  
 * Using our dbOut() function allows us to encapsulate the most common functions for removing  
 * slashes with the PHP stripslashes() function, plus the trim() function to remove spaces.
 *
 * @param string $str data as pulled from MySQL
 * @return $str data cleaned of slashes, spaces around string, etc.
 * @see dbIn()
 * @todo none
 */

function makeLinks($ar)
{
    $myReturn = '';
    foreach($ar as $url => $label)
    {
        echo'<li class="active"><a href="' . $url . '">' . $label . '</a></li>';      
    }
    return $myReturn;   
}

function dbOut($str)
{
	if($str!=""){$str = stripslashes(trim($str));}//strip out slashes entered for SQL safety
	return $str;
} #End dbOut()

//safe-email-functions.php
/*
 * This is a file designed to test a custom function named safeEmail().
 * safeEmail() avoids sender domain spoofing, which prevents mail from being 
 * misidentified as spam and therefore deleted before arrival.
 * process_post() creates a formatted message from the POST data
 * The functions safeEmail() and process_post() can be copied to  
 * and pasted into your config file after testing.
*/
/*
Allows us to send an email that respects the server domain spoofing polices of 
hosts like DH.
$response = safeEmail($to, $subject, $message, $replyTo,'html');
if($response)
{
    echo 'hopefully HTML email sent!<br />';
}else{
   echo 'Trouble with HTML email!<br />'; 
}
*/
function safeEmail($to, $subject, $message, $replyTo = '',$contentType='text')
{
    $fromAddress = "Automated Email <noreply@" . $_SERVER["SERVER_NAME"] . ">";

    if(strtolower($contentType)=='html')
    {//change to html format
        $contentType = 'Content-type: text/html; charset=iso-8859-1';
    }else{//default is text
        $contentType = 'Content-type: text/plain; charset=iso-8859-1';
    }
    
    $headers[] = "MIME-Version: 1.0";//optional but more correct
    //$headers[] = "Content-type: text/plain; charset=iso-8859-1";
    $headers[] = $contentType;
    //$headers[] = "From: Sender Name <sender@domain.com>";
    $headers[] = 'From: ' . $fromAddress;
    //$headers[] = "Bcc: JJ Chong <bcc@domain2.com>";
    
    if($replyTo !=''){//only add replyTo if passed
        //$headers[] = "Reply-To: Recipient Name <receiver@domain3.com>";
        $headers[] = 'Reply-To: ' . $replyTo;   
    }
    
    $headers[] = "Subject: {$subject}";
    $headers[] = "X-Mailer: PHP/". phpversion();
    
    //collapse all header data into a string with operating system safe
    //carriage returns - PHP_EOL
    $headers = implode(PHP_EOL,$headers);

    //use mail() command internally and pass back the feedback
    return mail($to, $subject, $message, $headers);
}//end safeEmail()


/*
    The function below loops through the entire POST data and creating a single string of name/value pairs to send.  When we do this, we can now add elements and not need to address them in the formhandler!

    There is also a bit of code that replaces any underscores with spaces.  This is useful because we can name our POST variables in such a way that makes it easier for the client to view our emails.

    $to = 'xxx@example.com';
    $message = process_post();
    $replyTo = $_POST['Email'];
    $subject = 'Test from contact form';
    
    safeEmail($to, $subject, $message, $replyTo);
*/
function process_post()
{//loop through POST vars and return a single string
    $myReturn = ''; //set to initial empty value

    foreach($_POST as $varName=> $value)
    {#loop POST vars to create JS array on the current page - include email
         $strippedVarName = str_replace("_"," ",$varName);#remove underscores
        if(is_array($_POST[$varName]))
         {#checkboxes are arrays, and we need to collapse the array to comma separated string!
             $myReturn .= $strippedVarName . ": " . implode(",",$_POST[$varName]) . PHP_EOL;
         }else{//not an array, create line
             $myReturn .= $strippedVarName . ": " . $value . PHP_EOL;
         }
    }
    return $myReturn;
}
